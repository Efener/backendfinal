# render.yaml - Render Blueprint
# Projenizin tüm altyapısını kod olarak tanımlar.
# https://render.com/docs/blueprint-spec

# Ortam değişkenlerini (secrets) saklamak için bir grup oluşturuyoruz.
# Bu grubu Render arayüzünde oluşturup .env dosyanızdaki değerleri buraya gireceksiniz.
envVarGroups:
  - name: hotel-secrets
    envVars:
      - key: POSTGRES_DB_URL
        value: "" # Render arayüzünde doldurulacak
      - key: MONGO_URL
        value: "" # Render arayüzünde doldurulacak
      - key: GEMINI_API_KEY
        value: "" # Render arayüzünde doldurulacak
      - key: REACT_APP_GOOGLE_MAPS_API_KEY
        value: "" # Render arayüzünde doldurulacak
      - key: JWT_SECRET
        value: "" # Render arayüzünde doldurulacak
      - key: GEMINI_API_URL
        value: "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
      - key: NODE_OPTIONS # hotel-comments-service için
        value: "--tls-min-v1.2"

services:
  # 1. BAĞIMLILIKLAR (Dependencies)
  #--------------------------------
  - name: redis
    type: redis
    plan: free # Başlangıç için ücretsiz plan yeterlidir.

  - name: rabbitmq
    type: pserv # Private Service (Dışarıya kapalı servis)
    plan: starter # Ücretsiz plan RabbitMQ için yeterli olmayabilir.
    image:
      url: rabbitmq:3.9-management-alpine

  # 2. ÖZEL SERVİSLER (Backend Microservices)
  # Bunlar halka açık olmayacak, sadece API Gateway üzerinden erişilecek.
  #-----------------------------------------------------------------
  - name: hotel-admin-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/hotel-admin-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets

  - name: hotel-search-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/hotel-search-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis
          property: connectionString # Render, Redis URL'sini otomatik sağlar.

  - name: hotel-booking-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/hotel-booking-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets
      - key: RABBITMQ_URL # RabbitMQ servisine iç ağdan bağlanıyoruz.
        value: amqp://rabbitmq:5672

  - name: hotel-comments-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/hotel-comments-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets

  - name: notification-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/notification-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets
      - key: RABBITMQ_URL
        value: amqp://rabbitmq:5672

  - name: ai-agent-service
    type: pserv
    env: docker
    dockerBuild:
      context: ./services/ai-agent-service
      dockerfilePath: Dockerfile
    envVars:
      - fromGroup: hotel-secrets

  # 3. GENEL WEB SERVİSLERİ (Publicly Accessible)
  #------------------------------------------------
  - name: api-gateway
    type: web # Web Service (Dışarıya açık servis)
    env: docker
    plan: starter
    dockerBuild:
      context: ./api-gateway
      dockerfilePath: Dockerfile
    healthCheckPath: / # Basit bir sağlık kontrolü, gerekirse değiştirilebilir.
    # API Gateway diğer servislere yukarıda tanımlanan adlarla erişir.

  - name: frontend
    type: web
    plan: starter
    env: docker
    dockerBuild:
      context: ./frontend
      dockerfilePath: Dockerfile
      args:
        REACT_APP_GOOGLE_MAPS_API_KEY: ${REACT_APP_GOOGLE_MAPS_API_KEY}
    envVars:
      - fromGroup: hotel-secrets 