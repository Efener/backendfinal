services:
  redis:
    image: redis:6.2-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # for amqp
      - "15672:15672" # for management ui
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 5s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "3000:3000"
    depends_on:
      hotel-admin-service:
        condition: service_started
      hotel-search-service:
        condition: service_started
      hotel-booking-service:
        condition: service_started
      hotel-comments-service:
        condition: service_started
      ai-agent-service:
        condition: service_started

  hotel-admin-service:
    build: ./services/hotel-admin-service
    container_name: hotel_admin_service
    ports:
      - "3001:3001"
    environment:
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy

  hotel-search-service:
    build: ./services/hotel-search-service
    container_name: hotel_search_service
    ports:
      - "3002:3002"
    environment:
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy

  hotel-booking-service:
    build: ./services/hotel-booking-service
    container_name: hotel_booking_service
    ports:
      - "3003:3003"
    environment:
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy

  hotel-comments-service:
    build: ./services/hotel-comments-service
    container_name: hotel_comments_service
    ports:
      - "3004:3004"
    environment:
      - MONGO_URL=${MONGO_URL}
      - NODE_OPTIONS=--tls-min-v1.2
      - JWT_SECRET=${JWT_SECRET}

  notification-service:
    build: ./services/notification-service
    container_name: notification_service
    environment:
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy

  ai-agent-service:
    build: ./services/ai-agent-service
    container_name: ai_agent_service
    ports:
      - "3005:3005"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_GOOGLE_MAPS_API_KEY=${REACT_APP_GOOGLE_MAPS_API_KEY}
    container_name: frontend_app
    ports:
      - "80:80"
    depends_on:
      - api-gateway

volumes:
  redis_data:
  rabbitmq_data: 